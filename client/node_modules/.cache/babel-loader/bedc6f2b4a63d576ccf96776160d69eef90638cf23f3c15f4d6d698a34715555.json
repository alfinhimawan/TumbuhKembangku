{"ast":null,"code":"var _jsxFileName = \"D:\\\\Infinite\\\\client\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { storage, generateId } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Dummy users data\nconst dummyUsers = [{\n  id: '1',\n  email: 'parent@example.com',\n  name: 'Ibu Sarah',\n  phone: '08123456789',\n  createdAt: new Date('2024-01-01')\n}, {\n  id: '2',\n  email: 'ayah@example.com',\n  name: 'Ayah Budi',\n  phone: '08123456790',\n  createdAt: new Date('2024-01-02')\n}];\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user on app start\n    const storedUser = storage.get('currentUser');\n    if (storedUser) {\n      setUser(storedUser);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Check dummy users\n    const foundUser = dummyUsers.find(u => u.email === email);\n    if (!foundUser) {\n      setLoading(false);\n      throw new Error('Email tidak ditemukan');\n    }\n\n    // In real app, validate password with backend\n    if (password !== 'password123') {\n      setLoading(false);\n      throw new Error('Password salah');\n    }\n    setUser(foundUser);\n    storage.set('currentUser', foundUser);\n    setLoading(false);\n  };\n  const register = async (email, password, name) => {\n    setLoading(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Check if user already exists\n    const existingUser = dummyUsers.find(u => u.email === email);\n    if (existingUser) {\n      setLoading(false);\n      throw new Error('Email sudah terdaftar');\n    }\n\n    // Create new user\n    const newUser = {\n      id: generateId(),\n      email,\n      name,\n      createdAt: new Date()\n    };\n    dummyUsers.push(newUser);\n    setUser(newUser);\n    storage.set('currentUser', newUser);\n    setLoading(false);\n  };\n  const logout = () => {\n    setUser(null);\n    storage.remove('currentUser');\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","storage","generateId","jsxDEV","_jsxDEV","AuthContext","undefined","dummyUsers","id","email","name","phone","createdAt","Date","AuthProvider","children","_s","user","setUser","loading","setLoading","storedUser","get","login","password","Promise","resolve","setTimeout","foundUser","find","u","Error","set","register","existingUser","newUser","push","logout","remove","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["D:/Infinite/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport { storage, generateId } from '../utils/helpers';\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Dummy users data\r\nconst dummyUsers: User[] = [\r\n  {\r\n    id: '1',\r\n    email: 'parent@example.com',\r\n    name: 'Ibu Sarah',\r\n    phone: '08123456789',\r\n    createdAt: new Date('2024-01-01')\r\n  },\r\n  {\r\n    id: '2',\r\n    email: 'ayah@example.com',\r\n    name: 'Ayah Budi',\r\n    phone: '08123456790',\r\n    createdAt: new Date('2024-01-02')\r\n  }\r\n];\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored user on app start\r\n    const storedUser = storage.get('currentUser');\r\n    if (storedUser) {\r\n      setUser(storedUser);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<void> => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Check dummy users\r\n    const foundUser = dummyUsers.find(u => u.email === email);\r\n    \r\n    if (!foundUser) {\r\n      setLoading(false);\r\n      throw new Error('Email tidak ditemukan');\r\n    }\r\n    \r\n    // In real app, validate password with backend\r\n    if (password !== 'password123') {\r\n      setLoading(false);\r\n      throw new Error('Password salah');\r\n    }\r\n    \r\n    setUser(foundUser);\r\n    storage.set('currentUser', foundUser);\r\n    setLoading(false);\r\n  };\r\n\r\n  const register = async (email: string, password: string, name: string): Promise<void> => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Check if user already exists\r\n    const existingUser = dummyUsers.find(u => u.email === email);\r\n    if (existingUser) {\r\n      setLoading(false);\r\n      throw new Error('Email sudah terdaftar');\r\n    }\r\n    \r\n    // Create new user\r\n    const newUser: User = {\r\n      id: generateId(),\r\n      email,\r\n      name,\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    dummyUsers.push(newUser);\r\n    setUser(newUser);\r\n    storage.set('currentUser', newUser);\r\n    setLoading(false);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    storage.remove('currentUser');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}