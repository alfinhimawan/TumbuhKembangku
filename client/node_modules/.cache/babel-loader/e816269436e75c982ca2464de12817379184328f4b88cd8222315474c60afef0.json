{"ast":null,"code":"var _jsxFileName = \"D:\\\\UNY\\\\Project\\\\Infinite\\\\client\\\\src\\\\contexts\\\\ChildContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { storage, generateId } from '../utils/helpers';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChildContext = /*#__PURE__*/createContext(undefined);\n\n// Dummy children data\nconst dummyChildren = [{\n  id: '1',\n  parentId: '1',\n  name: 'Aisyah',\n  birthDate: new Date('2023-03-15'),\n  // 18 months old\n  gender: 'female',\n  createdAt: new Date('2023-03-15')\n}, {\n  id: '2',\n  parentId: '1',\n  name: 'Ahmad',\n  birthDate: new Date('2023-11-20'),\n  // 10 months old\n  gender: 'male',\n  createdAt: new Date('2023-11-20')\n}, {\n  id: '3',\n  parentId: '2',\n  name: 'Zahra',\n  birthDate: new Date('2024-01-10'),\n  // 8 months old\n  gender: 'female',\n  createdAt: new Date('2024-01-10')\n}];\nexport const ChildProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [childrenList, setChildrenList] = useState([]);\n  const [selectedChild, setSelectedChild] = useState(null);\n  useEffect(() => {\n    if (user) {\n      // Get children for current user\n      const userChildren = dummyChildren.filter(child => child.parentId === user.id);\n      setChildrenList(userChildren);\n\n      // Load selected child from storage or select first child\n      const storedSelectedChildId = storage.get(`selectedChild_${user.id}`);\n      if (storedSelectedChildId) {\n        const storedChild = userChildren.find(c => c.id === storedSelectedChildId);\n        if (storedChild) {\n          setSelectedChild(storedChild);\n        } else if (userChildren.length > 0) {\n          setSelectedChild(userChildren[0]);\n        }\n      } else if (userChildren.length > 0) {\n        setSelectedChild(userChildren[0]);\n      }\n    } else {\n      setChildrenList([]);\n      setSelectedChild(null);\n    }\n  }, [user]);\n  const addChild = childData => {\n    if (!user) return;\n    const newChild = {\n      ...childData,\n      id: generateId(),\n      parentId: user.id,\n      createdAt: new Date()\n    };\n    dummyChildren.push(newChild);\n    setChildrenList(prev => [...prev, newChild]);\n\n    // Auto-select new child if it's the first one\n    if (childrenList.length === 0) {\n      setSelectedChild(newChild);\n      storage.set(`selectedChild_${user.id}`, newChild.id);\n    }\n  };\n  const updateChild = (id, updates) => {\n    const updatedChild = {\n      ...childrenList.find(c => c.id === id),\n      ...updates\n    };\n\n    // Update in dummy data\n    const index = dummyChildren.findIndex(c => c.id === id);\n    if (index !== -1) {\n      dummyChildren[index] = updatedChild;\n    }\n\n    // Update in state\n    setChildrenList(prev => prev.map(c => c.id === id ? updatedChild : c));\n\n    // Update selected child if it's the one being updated\n    if ((selectedChild === null || selectedChild === void 0 ? void 0 : selectedChild.id) === id) {\n      setSelectedChild(updatedChild);\n    }\n  };\n  const selectChild = child => {\n    setSelectedChild(child);\n    if (user) {\n      storage.set(`selectedChild_${user.id}`, child.id);\n    }\n  };\n  const deleteChild = id => {\n    // Remove from dummy data\n    const index = dummyChildren.findIndex(c => c.id === id);\n    if (index !== -1) {\n      dummyChildren.splice(index, 1);\n    }\n\n    // Remove from state\n    const updatedChildren = childrenList.filter(c => c.id !== id);\n    setChildrenList(updatedChildren);\n\n    // Update selected child\n    if ((selectedChild === null || selectedChild === void 0 ? void 0 : selectedChild.id) === id) {\n      const newSelected = updatedChildren.length > 0 ? updatedChildren[0] : null;\n      setSelectedChild(newSelected);\n      if (user) {\n        if (newSelected) {\n          storage.set(`selectedChild_${user.id}`, newSelected.id);\n        } else {\n          storage.remove(`selectedChild_${user.id}`);\n        }\n      }\n    }\n  };\n  const value = {\n    children: childrenList,\n    selectedChild,\n    addChild,\n    updateChild,\n    selectChild,\n    deleteChild\n  };\n  return /*#__PURE__*/_jsxDEV(ChildContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(ChildProvider, \"4rqQntHZDCrvs1a3ZVZrFhybcH0=\", false, function () {\n  return [useAuth];\n});\n_c = ChildProvider;\nexport const useChildren = () => {\n  _s2();\n  const context = useContext(ChildContext);\n  if (!context) {\n    throw new Error('useChildren must be used within a ChildProvider');\n  }\n  return context;\n};\n_s2(useChildren, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChildProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","storage","generateId","useAuth","jsxDEV","_jsxDEV","ChildContext","undefined","dummyChildren","id","parentId","name","birthDate","Date","gender","createdAt","ChildProvider","children","_s","user","childrenList","setChildrenList","selectedChild","setSelectedChild","userChildren","filter","child","storedSelectedChildId","get","storedChild","find","c","length","addChild","childData","newChild","push","prev","set","updateChild","updates","updatedChild","index","findIndex","map","selectChild","deleteChild","splice","updatedChildren","newSelected","remove","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChildren","_s2","context","Error","$RefreshReg$"],"sources":["D:/UNY/Project/Infinite/client/src/contexts/ChildContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { Child, ChildContextType } from '../types';\r\nimport { storage, generateId } from '../utils/helpers';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ChildContext = createContext<ChildContextType | undefined>(undefined);\r\n\r\n// Dummy children data\r\nconst dummyChildren: Child[] = [\r\n  {\r\n    id: '1',\r\n    parentId: '1',\r\n    name: 'Aisyah',\r\n    birthDate: new Date('2023-03-15'), // 18 months old\r\n    gender: 'female',\r\n    createdAt: new Date('2023-03-15')\r\n  },\r\n  {\r\n    id: '2',\r\n    parentId: '1',\r\n    name: 'Ahmad',\r\n    birthDate: new Date('2023-11-20'), // 10 months old\r\n    gender: 'male',\r\n    createdAt: new Date('2023-11-20')\r\n  },\r\n  {\r\n    id: '3',\r\n    parentId: '2',\r\n    name: 'Zahra',\r\n    birthDate: new Date('2024-01-10'), // 8 months old\r\n    gender: 'female',\r\n    createdAt: new Date('2024-01-10')\r\n  }\r\n];\r\n\r\nexport const ChildProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const { user } = useAuth();\r\n  const [childrenList, setChildrenList] = useState<Child[]>([]);\r\n  const [selectedChild, setSelectedChild] = useState<Child | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      // Get children for current user\r\n      const userChildren = dummyChildren.filter(child => child.parentId === user.id);\r\n      setChildrenList(userChildren);\r\n      \r\n      // Load selected child from storage or select first child\r\n      const storedSelectedChildId = storage.get(`selectedChild_${user.id}`);\r\n      if (storedSelectedChildId) {\r\n        const storedChild = userChildren.find(c => c.id === storedSelectedChildId);\r\n        if (storedChild) {\r\n          setSelectedChild(storedChild);\r\n        } else if (userChildren.length > 0) {\r\n          setSelectedChild(userChildren[0]);\r\n        }\r\n      } else if (userChildren.length > 0) {\r\n        setSelectedChild(userChildren[0]);\r\n      }\r\n    } else {\r\n      setChildrenList([]);\r\n      setSelectedChild(null);\r\n    }\r\n  }, [user]);\r\n\r\n  const addChild = (childData: Omit<Child, 'id' | 'parentId' | 'createdAt'>) => {\r\n    if (!user) return;\r\n    \r\n    const newChild: Child = {\r\n      ...childData,\r\n      id: generateId(),\r\n      parentId: user.id,\r\n      createdAt: new Date()\r\n    };\r\n    \r\n    dummyChildren.push(newChild);\r\n    setChildrenList(prev => [...prev, newChild]);\r\n    \r\n    // Auto-select new child if it's the first one\r\n    if (childrenList.length === 0) {\r\n      setSelectedChild(newChild);\r\n      storage.set(`selectedChild_${user.id}`, newChild.id);\r\n    }\r\n  };\r\n\r\n  const updateChild = (id: string, updates: Partial<Child>) => {\r\n    const updatedChild = { ...childrenList.find(c => c.id === id)!, ...updates };\r\n    \r\n    // Update in dummy data\r\n    const index = dummyChildren.findIndex(c => c.id === id);\r\n    if (index !== -1) {\r\n      dummyChildren[index] = updatedChild;\r\n    }\r\n    \r\n    // Update in state\r\n    setChildrenList(prev => prev.map(c => c.id === id ? updatedChild : c));\r\n    \r\n    // Update selected child if it's the one being updated\r\n    if (selectedChild?.id === id) {\r\n      setSelectedChild(updatedChild);\r\n    }\r\n  };\r\n\r\n  const selectChild = (child: Child) => {\r\n    setSelectedChild(child);\r\n    if (user) {\r\n      storage.set(`selectedChild_${user.id}`, child.id);\r\n    }\r\n  };\r\n\r\n  const deleteChild = (id: string) => {\r\n    // Remove from dummy data\r\n    const index = dummyChildren.findIndex(c => c.id === id);\r\n    if (index !== -1) {\r\n      dummyChildren.splice(index, 1);\r\n    }\r\n    \r\n    // Remove from state\r\n    const updatedChildren = childrenList.filter(c => c.id !== id);\r\n    setChildrenList(updatedChildren);\r\n    \r\n    // Update selected child\r\n    if (selectedChild?.id === id) {\r\n      const newSelected = updatedChildren.length > 0 ? updatedChildren[0] : null;\r\n      setSelectedChild(newSelected);\r\n      if (user) {\r\n        if (newSelected) {\r\n          storage.set(`selectedChild_${user.id}`, newSelected.id);\r\n        } else {\r\n          storage.remove(`selectedChild_${user.id}`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const value: ChildContextType = {\r\n    children: childrenList,\r\n    selectedChild,\r\n    addChild,\r\n    updateChild,\r\n    selectChild,\r\n    deleteChild\r\n  };\r\n\r\n  return (\r\n    <ChildContext.Provider value={value}>\r\n      {children}\r\n    </ChildContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useChildren = (): ChildContextType => {\r\n  const context = useContext(ChildContext);\r\n  if (!context) {\r\n    throw new Error('useChildren must be used within a ChildProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}